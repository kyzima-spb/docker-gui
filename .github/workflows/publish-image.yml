name: Build and publish images

on:
  push:
    branches:
      - master
      - dev-master
    paths:
      - .github/workflows/publish-image.yml
      - docker/**

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release:
          - "bookworm-slim"
          - "bullseye-slim"
          - "buster-slim"
        include:
          - latest: false
          - latest: true
            release: "bookworm-slim"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set GHCR_PACKAGE_NAME environment variable
        run: |
          name="$(echo ${{ vars.IMAGE_NAME }} | awk -F/ '{ print $2 }')"
          echo "GHCR_PACKAGE_NAME=$name" >> $GITHUB_ENV
      -
        name: Docker meta
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ vars.IMAGE_NAME }}
            ghcr.io/${{ github.repository_owner }}/${{ env.GHCR_PACKAGE_NAME }}
          tags: |
            ${{ matrix.release }}
          flavor: |
            latest=${{ matrix.latest }}      
      -
        name: Set CACHE_IMAGE environment variable
        run: echo "CACHE_IMAGE=${{ vars.IMAGE_NAME }}:buildcache-${{ steps.meta.outputs.version }}" >> $GITHUB_ENV
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        if: ${{ github.ref_name == 'master' }}
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./docker/root
          file: ./docker/Dockerfile
          build-args: |
            RELEASE=${{ matrix.release }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}
          cache-to: type=registry,ref=${{ env.CACHE_IMAGE }},mode=max
          push: true
      -
        name: Delete old versions of images
        uses: vlaurin/action-ghcr-prune@main
        with:
          token: ${{ secrets.PAT }}
          user: ${{ github.repository_owner }}
          container: ${{ env.GHCR_PACKAGE_NAME }}
          untagged: true

  build-example:
    if: ${{ github.ref_name == 'master' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Set environment variables
        run: |
          GHCR_PACKAGE_NAME=chromium
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$GHCR_PACKAGE_NAME"

          echo "GHCR_PACKAGE_NAME=$GHCR_PACKAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "CACHE_IMAGE="$IMAGE_NAME:buildcache" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          tags: |
            latest
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./examples/chromium/root
          file: ./examples/chromium/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}
          cache-to: type=registry,ref=${{ env.CACHE_IMAGE }},mode=max
          push: true
      - 
        name: Delete old versions of images
        uses: vlaurin/action-ghcr-prune@main
        with:
          token: ${{ secrets.PAT }}
          user: ${{ github.repository_owner }}
          container: ${{ env.GHCR_PACKAGE_NAME }}
          untagged: true
