on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      release:
        required: true
        type: string
      latest:
        required: false
        type: boolean
        default: false
      push:
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set GHCR_IMAGE environment variable
        env:
          IMAGE: ${{ inputs.image }}
        run: echo "GHCR_IMAGE=ghcr.io/$GITHUB_REPOSITORY_OWNER/${IMAGE##*/}" >> $GITHUB_ENV
      -
        name: Docker meta
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ inputs.image }}
            ${{ env.GHCR_IMAGE }}
          tags: |
            ${{ inputs.release }}
          flavor: |
            latest=${{ inputs.latest }}
      -
        name: Set CACHE_IMAGE environment variable
        run: echo "CACHE_IMAGE=${{ env.GHCR_IMAGE }}:buildcache-${{ steps.meta.outputs.version }}" >> $GITHUB_ENV
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        if: ${{ inputs.push }}
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./docker/root
          file: ./docker/Dockerfile
          build-args: |
            RELEASE=${{ inputs.release }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}
          cache-to: type=registry,ref=${{ env.CACHE_IMAGE }},mode=max
          push: true

  delete-untagged:
    if: ${{ inputs.push }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Set GHCR_IMAGE environment variable
        env:
          IMAGE: ${{ inputs.image }}
        run: echo "GHCR_IMAGE=ghcr.io/$GITHUB_REPOSITORY_OWNER/${IMAGE##*/}" >> $GITHUB_ENV
      -
        continue-on-error: true
        name: Deletes all untagged image versions
        uses: vlaurin/action-ghcr-prune@main
        with:
          token: ${{ secrets.PAT }}
          user: ${{ github.repository_owner }}
          container: ${{ env.GHCR_IMAGE }}
          untagged: true
